<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>EssentialDataScience</title><link href="https://blog.vipings.com/" rel="alternate"></link><link href="https://blog.vipings.com/feeds/finance02.atom.xml" rel="self"></link><id>https://blog.vipings.com/</id><updated>2012-12-17T15:00:00+05:30</updated><entry><title>Python Finance Package v0.02 – Basic Utils and Market Simulator</title><link href="https://blog.vipings.com/blog/2012/12/17/python-finance-package-v0-02-basic-utils-and-market-simulator/" rel="alternate"></link><published>2012-12-17T15:00:00+05:30</published><updated>2012-12-17T15:00:00+05:30</updated><author><name>Daniel Rodriguez</name></author><id>tag:blog.vipings.com,2012-12-17:blog/2012/12/17/python-finance-package-v0-02-basic-utils-and-market-simulator/</id><summary type="html">&lt;p&gt;Continuing with the &lt;strong&gt;(Basic)&lt;/strong&gt; Python Finance Package. Now has some
basic utils: total-return, daily-returns, and sharpe-ratio calculations.
Also a Market Simulator, the purpose was to solve the &lt;a href="https://class.coursera.org/compinvesting1-2012-001/class/index" title="Computational Investing"&gt;Computational
Investing&lt;/a&gt; Homework 3.&lt;/p&gt;
&lt;h2&gt;Changes on DataAccess&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Now the index of the DataFrame is DatetimeIndex not string. With
    this is possible to index it with datetimes.&lt;/li&gt;
&lt;li&gt;Moved the classes folder from './data/' to './utils/'&lt;/li&gt;
&lt;li&gt;Improved Documentation&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Market Simulator&lt;/h2&gt;
&lt;p&gt;Reads a .csv file with the orders/trades. Downloads the necessary data
(symbols and dates between the ). Makes a simulation of the orders:&lt;/p&gt;
&lt;p&gt;The .csv file looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;year,month,day,symbol,action,num_of_shares
2011,1,10,AAPL,Buy,1500
2011,1,13,AAPL,Sell,1500
2011,1,13,IBM,Buy,4000
2011,1,26,GOOG,Buy,1000
2011,2,2,XOM,Sell,4000
2011,2,10,XOM,Buy,4000
2011,3,3,GOOG,Sell,1000
2011,3,3,IBM,Sell,2200
2011,6,3,IBM,Sell,3300
2011,5,3,IBM,Buy,1500
2011,6,10,AAPL,Buy,1200
2011,8,1,GOOG,Buy,55
2011,8,1,GOOG,Sell,55
2011,12,20,AAPL,Sell,1200
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How to use it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set the initial amount of cash&lt;/li&gt;
&lt;li&gt;Run the simulation,  as an argument give the path to the csv file&lt;/li&gt;
&lt;li&gt;See the the information&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;finance.sim&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MarketSimulator&lt;/span&gt;

&lt;span class="n"&gt;sim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MarketSimulator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initial_cash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;
&lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;simulate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;quot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;MarketSimulator_orders&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;quot&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt;
&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Qt4Agg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Probably most people dont need this line&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;           Portfolio
Date
2011-01-10  1000000
2011-01-11   998785
2011-01-12  1002940
2011-01-13  1004815
2011-01-14  1009415
2011-01-18  1011935
2011-01-19  1031495
2011-01-20  1031935
2011-01-21  1030775
2011-01-24  1046815
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;{% b64img articles/2012/12/finance02/portfolio_value.png "Portfolio value" %}&lt;/p&gt;
&lt;h2&gt;Basic Utils&lt;/h2&gt;
&lt;p&gt;With the portfolio ready we can get some info about it, for example the
total return and sharpe ratio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Total Return:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Portfolio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sharpe_ratio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extraAnswers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which prints:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="n"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.1338600000000001&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;std&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0071901402219816928&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sharpe_ratio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.1836398092874625&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0005493527495690362&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Next step is to implement an Event Profiler to solve Homework 4.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where to find the code?&lt;/strong&gt; On github: &lt;a href="https://github.com/danielfrg/PythonFinance"&gt;PythonFinance&lt;/a&gt;&lt;/p&gt;</summary><category term="Coursera"></category><category term="Finance"></category><category term="Pandas"></category><category term="Python"></category><category term="Computational investing"></category></entry></feed>
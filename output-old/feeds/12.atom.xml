<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>EssentialDataScience</title><link href="https://blog.vipings.com/" rel="alternate"></link><link href="https://blog.vipings.com/feeds/12.atom.xml" rel="self"></link><id>https://blog.vipings.com/</id><updated>2015-12-04T00:00:00+05:30</updated><entry><title>Talk @ PyData NYC 2015: Querying 1.6 billion reddit comments with python</title><link href="https://blog.vipings.com/blog/2015/12/04/pydata-2015-quering-1-6-billion-reddit-comments-with-python/" rel="alternate"></link><published>2015-12-04T00:00:00+05:30</published><updated>2015-12-04T00:00:00+05:30</updated><author><name>Daniel Rodriguez</name></author><id>tag:blog.vipings.com,2015-12-04:blog/2015/12/04/pydata-2015-quering-1-6-billion-reddit-comments-with-python/</id><summary type="html">&lt;p&gt;I had the luck to go to beautiful NYC in the fall to give a talk at PyData NYC 2015.&lt;/p&gt;
&lt;p&gt;The talk was about how to query around 1.6 billion reddit comments with python tools while leveraging
some big data tools like Impala and Hive.&lt;/p&gt;
&lt;p&gt;Some of the content can be found in the &lt;a href="https://www.continuum.io/blog/developer-blog/querying-17-billion-reddit-comments-anaconda-platform"&gt;continuum developer blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Below you can find the &lt;a href="https://www.youtube.com/watch?v=8Tzh42mQjrw"&gt;video of the presentation&lt;/a&gt; and &lt;a href="http://www.slideshare.net/DanielRodriguez459/querying-18-billion-reddit-comments-with-python"&gt;slides&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;{% youtube 8Tzh42mQjrw [700 394] %}&lt;/p&gt;
&lt;p&gt;PD: There is a couple of good jokes at 35:05 - If you like bad jokes﻿&lt;/p&gt;</summary><category term="Talk"></category><category term="PyData"></category><category term="Blaze"></category><category term="Ibis"></category><category term="Reddit"></category><category term="Impala"></category></entry><entry><title>Python Finance Package v0.01 - Data Manager</title><link href="https://blog.vipings.com/blog/2012/12/13/python-finance-package-v0-01-data-manager/" rel="alternate"></link><published>2012-12-13T12:59:00+05:30</published><updated>2012-12-13T12:59:00+05:30</updated><author><name>Daniel Rodriguez</name></author><id>tag:blog.vipings.com,2012-12-13:blog/2012/12/13/python-finance-package-v0-01-data-manager/</id><summary type="html">&lt;p&gt;I have learned a lot from my most recent Coursera Course: &lt;a href="https://class.coursera.org/compinvesting1-2012-001/class/index" title="Computational Investing - Part 1"&gt;Computational
Investing Part 1&lt;/a&gt;. The language used on the class is Python so I
couldn't be happier; we are using a package called &lt;a href="http://wiki.quantsoftware.org/index.php?title=QuantSoftware_ToolKit" title="QSTK"&gt;QSTK&lt;/a&gt; developed by
some people at Georgia Tech, who are also responsible for the class.&lt;/p&gt;
&lt;p&gt;The quality of the package is amazing, has a tons of features, but one
area I notice the package to has to be improved is the data downloading
and management.&lt;/p&gt;
&lt;p&gt;I decide to write some python scripts to help me with this problem, and
later on I decide to write a very simple Python Package with a few utils
to help me on this class and future finance projects. A little bit an
alternative to QSTK and a little bit a complement for it.&lt;/p&gt;
&lt;p&gt;At the same time I decide to make the jump from Python 2.7 to Python
3.2, this makes QSTK useless for now. The transition from 2.7 to 3.2 was
very smooth, I still write &lt;code&gt;print var&lt;/code&gt; instead of &lt;code&gt;print(var)&lt;/code&gt; a &lt;strong&gt;lot&lt;/strong&gt;
of times but is a minor issue.&lt;/p&gt;
&lt;p&gt;For now the package only has the Data Management part but yesterday I
finished my final exams so I have a little bit of time to work on this.&lt;/p&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;You tell the symbol/symbols, dates  and the fields (columns) you want
from the stocks. The package automatically downloads the information
from Yahoo! Finance and loads the information into a Pandas DataFrame.
Before downloading the package checks if the information is already
downloaded looking into already downloaded information, and
optional (default True) saves a pickled version of the DataFrame to load
faster the next time.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;finance.data&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DataAccess&lt;/span&gt;

&lt;span class="n"&gt;da&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DataAccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./data/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;symbols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AAPL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GLD&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GOOG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SPY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;XOM&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;start_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2008&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;end_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2009&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Close&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;close&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;da&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Little Benchmark&lt;/h3&gt;
&lt;p&gt;Just using &lt;code&gt;clock()&lt;/code&gt; and &lt;code&gt;time()&lt;/code&gt; to see if it was worth it. It is.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Directory empty: Download and save 5 stocks
    1.4336301090943933 1.434000015258789
Load 5 stocks from .csv
    0.023402424167761726 0.023000001907348633
Load 5 stocks from serialized
    0.0007370202310554852 0.0009999275207519531
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Where to find the code&lt;/h2&gt;
&lt;p&gt;On github: &lt;a href="https://github.com/danielfrg/PythonFinance" title="PythonFinance"&gt;PythonFinance&lt;/a&gt;. This is such a small package is necessary
to manually download it and put it on a folder where you have other
python packages.&lt;/p&gt;</summary><category term="Coursera"></category><category term="Finance"></category><category term="Pandas"></category><category term="Python"></category><category term="Computational investing"></category></entry></feed>